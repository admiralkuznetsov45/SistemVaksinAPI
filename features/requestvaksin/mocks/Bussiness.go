// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	requestvaksin "SistemVaksinAPI/features/requestvaksin"

	mock "github.com/stretchr/testify/mock"
)

// Bussiness is an autogenerated mock type for the Bussiness type
type Bussiness struct {
	mock.Mock
}

// CreateRequestvaksin provides a mock function with given fields: data
func (_m *Bussiness) CreateRequestvaksin(data requestvaksin.RequestvaksinCore) (requestvaksin.RequestvaksinCore, error) {
	ret := _m.Called(data)

	var r0 requestvaksin.RequestvaksinCore
	if rf, ok := ret.Get(0).(func(requestvaksin.RequestvaksinCore) requestvaksin.RequestvaksinCore); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(requestvaksin.RequestvaksinCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(requestvaksin.RequestvaksinCore) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllRequestvaksin provides a mock function with given fields:
func (_m *Bussiness) GetAllRequestvaksin() []requestvaksin.RequestvaksinCore {
	ret := _m.Called()

	var r0 []requestvaksin.RequestvaksinCore
	if rf, ok := ret.Get(0).(func() []requestvaksin.RequestvaksinCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]requestvaksin.RequestvaksinCore)
		}
	}

	return r0
}

// GetRequestvaksinByID provides a mock function with given fields: id
func (_m *Bussiness) GetRequestvaksinByID(id int) (requestvaksin.RequestvaksinCore, error) {
	ret := _m.Called(id)

	var r0 requestvaksin.RequestvaksinCore
	if rf, ok := ret.Get(0).(func(int) requestvaksin.RequestvaksinCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(requestvaksin.RequestvaksinCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRequestvaksinByUserID provides a mock function with given fields: id
func (_m *Bussiness) GetRequestvaksinByUserID(id int) ([]requestvaksin.RequestvaksinCore, error) {
	ret := _m.Called(id)

	var r0 []requestvaksin.RequestvaksinCore
	if rf, ok := ret.Get(0).(func(int) []requestvaksin.RequestvaksinCore); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]requestvaksin.RequestvaksinCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRequestvaksinByVaksinID provides a mock function with given fields: id
func (_m *Bussiness) GetRequestvaksinByVaksinID(id int) (int64, error) {
	ret := _m.Called(id)

	var r0 int64
	if rf, ok := ret.Get(0).(func(int) int64); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: data
func (_m *Bussiness) Login(data requestvaksin.RequestvaksinCore) (requestvaksin.RequestvaksinCore, error) {
	ret := _m.Called(data)

	var r0 requestvaksin.RequestvaksinCore
	if rf, ok := ret.Get(0).(func(requestvaksin.RequestvaksinCore) requestvaksin.RequestvaksinCore); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(requestvaksin.RequestvaksinCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(requestvaksin.RequestvaksinCore) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRequestVaksinDua provides a mock function with given fields: data
func (_m *Bussiness) UpdateRequestVaksinDua(data requestvaksin.RequestvaksinCore) (requestvaksin.RequestvaksinCore, error) {
	ret := _m.Called(data)

	var r0 requestvaksin.RequestvaksinCore
	if rf, ok := ret.Get(0).(func(requestvaksin.RequestvaksinCore) requestvaksin.RequestvaksinCore); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(requestvaksin.RequestvaksinCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(requestvaksin.RequestvaksinCore) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRequestVaksinSatu provides a mock function with given fields: data
func (_m *Bussiness) UpdateRequestVaksinSatu(data requestvaksin.RequestvaksinCore) (requestvaksin.RequestvaksinCore, error) {
	ret := _m.Called(data)

	var r0 requestvaksin.RequestvaksinCore
	if rf, ok := ret.Get(0).(func(requestvaksin.RequestvaksinCore) requestvaksin.RequestvaksinCore); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(requestvaksin.RequestvaksinCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(requestvaksin.RequestvaksinCore) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
