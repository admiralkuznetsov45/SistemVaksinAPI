// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	requestvaksin "SistemVaksinAPI/features/requestvaksin"

	mock "github.com/stretchr/testify/mock"
)

// Data is an autogenerated mock type for the Data type
type Data struct {
	mock.Mock
}

// EditRequestVaksinDua provides a mock function with given fields: data
func (_m *Data) EditRequestVaksinDua(data requestvaksin.RequestvaksinCore) (requestvaksin.RequestvaksinCore, error) {
	ret := _m.Called(data)

	var r0 requestvaksin.RequestvaksinCore
	if rf, ok := ret.Get(0).(func(requestvaksin.RequestvaksinCore) requestvaksin.RequestvaksinCore); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(requestvaksin.RequestvaksinCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(requestvaksin.RequestvaksinCore) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditRequestVaksinSatu provides a mock function with given fields: data
func (_m *Data) EditRequestVaksinSatu(data requestvaksin.RequestvaksinCore) (requestvaksin.RequestvaksinCore, error) {
	ret := _m.Called(data)

	var r0 requestvaksin.RequestvaksinCore
	if rf, ok := ret.Get(0).(func(requestvaksin.RequestvaksinCore) requestvaksin.RequestvaksinCore); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(requestvaksin.RequestvaksinCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(requestvaksin.RequestvaksinCore) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertRequestvaksin provides a mock function with given fields: data
func (_m *Data) InsertRequestvaksin(data requestvaksin.RequestvaksinCore) (requestvaksin.RequestvaksinCore, error) {
	ret := _m.Called(data)

	var r0 requestvaksin.RequestvaksinCore
	if rf, ok := ret.Get(0).(func(requestvaksin.RequestvaksinCore) requestvaksin.RequestvaksinCore); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(requestvaksin.RequestvaksinCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(requestvaksin.RequestvaksinCore) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: data
func (_m *Data) Login(data requestvaksin.RequestvaksinCore) (requestvaksin.RequestvaksinCore, error) {
	ret := _m.Called(data)

	var r0 requestvaksin.RequestvaksinCore
	if rf, ok := ret.Get(0).(func(requestvaksin.RequestvaksinCore) requestvaksin.RequestvaksinCore); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(requestvaksin.RequestvaksinCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(requestvaksin.RequestvaksinCore) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAllRequestvaksin provides a mock function with given fields:
func (_m *Data) SelectAllRequestvaksin() []requestvaksin.RequestvaksinCore {
	ret := _m.Called()

	var r0 []requestvaksin.RequestvaksinCore
	if rf, ok := ret.Get(0).(func() []requestvaksin.RequestvaksinCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]requestvaksin.RequestvaksinCore)
		}
	}

	return r0
}

// SelectRequestvaksinByID provides a mock function with given fields: id
func (_m *Data) SelectRequestvaksinByID(id int) (requestvaksin.RequestvaksinCore, error) {
	ret := _m.Called(id)

	var r0 requestvaksin.RequestvaksinCore
	if rf, ok := ret.Get(0).(func(int) requestvaksin.RequestvaksinCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(requestvaksin.RequestvaksinCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectRequestvaksinByUserID provides a mock function with given fields: id
func (_m *Data) SelectRequestvaksinByUserID(id int) ([]requestvaksin.RequestvaksinCore, error) {
	ret := _m.Called(id)

	var r0 []requestvaksin.RequestvaksinCore
	if rf, ok := ret.Get(0).(func(int) []requestvaksin.RequestvaksinCore); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]requestvaksin.RequestvaksinCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectRequestvaksinByVaksinID provides a mock function with given fields: id
func (_m *Data) SelectRequestvaksinByVaksinID(id int) (int64, error) {
	ret := _m.Called(id)

	var r0 int64
	if rf, ok := ret.Get(0).(func(int) int64); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
