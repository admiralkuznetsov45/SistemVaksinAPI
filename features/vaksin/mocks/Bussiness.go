// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	vaksin "SistemVaksinAPI/features/vaksin"

	mock "github.com/stretchr/testify/mock"
)

// Bussiness is an autogenerated mock type for the Bussiness type
type Bussiness struct {
	mock.Mock
}

// CreateVaksin provides a mock function with given fields: data
func (_m *Bussiness) CreateVaksin(data vaksin.VaksinCore) (vaksin.VaksinCore, error) {
	ret := _m.Called(data)

	var r0 vaksin.VaksinCore
	if rf, ok := ret.Get(0).(func(vaksin.VaksinCore) vaksin.VaksinCore); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(vaksin.VaksinCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(vaksin.VaksinCore) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVaksinByFaskesID provides a mock function with given fields: id
func (_m *Bussiness) GetVaksinByFaskesID(id int) ([]vaksin.VaksinCore, error) {
	ret := _m.Called(id)

	var r0 []vaksin.VaksinCore
	if rf, ok := ret.Get(0).(func(int) []vaksin.VaksinCore); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]vaksin.VaksinCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVaksinByID provides a mock function with given fields: id
func (_m *Bussiness) GetVaksinByID(id int) (vaksin.VaksinCore, error) {
	ret := _m.Called(id)

	var r0 vaksin.VaksinCore
	if rf, ok := ret.Get(0).(func(int) vaksin.VaksinCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(vaksin.VaksinCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVaksinByID provides a mock function with given fields: data
func (_m *Bussiness) UpdateVaksinByID(data vaksin.VaksinCore) (vaksin.VaksinCore, error) {
	ret := _m.Called(data)

	var r0 vaksin.VaksinCore
	if rf, ok := ret.Get(0).(func(vaksin.VaksinCore) vaksin.VaksinCore); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(vaksin.VaksinCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(vaksin.VaksinCore) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
